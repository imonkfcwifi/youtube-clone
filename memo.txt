쉽게 설명드리면 object를 만드는 키워드라고 생각하시면 됩니다.
왜 new를 통해 obj를 만드냐 하면 비슷한 구조를 가진 obj를 편하게 만들고 싶어서 그렇습니다.

예를들면

const car1 = { name : "아반떼" }
const car2 = { name : "레이" }
const car3 = { name : "소나타" }

이렇게 3개의 obj를 literal로 만들면 일일이 작성해줘야 되는데 new키워드를 사용하게 되면 좀 더 편해집니다.

function Car(name) { this.name = name }

const car1 = new Car('아반떼')
const car2 = new Car('레이')
const car3 = new Car('소나타')

예시는 알기 쉽게 이름만으로 구성했지만 obj property가 무수히 많아졌다고 가정하면 literal 보다는 new를 쓰는게 훨씬 더 편합니다.
이를 위해 ES6부터는 Class도 도입됐으니까 한번 검토해보시면 좋을 것 같네요 :)

[new operator]
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/new

[RegExp]
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp

[RegExp() constructor]
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp/RegExp

// 이로서 알게된 사실 : middle ware 의 next를 잘 활용해서 해야한다.
// 기존에 존재하던 req.res와 달리 express의 middleware를 활용하는 부분에서 몇가지를 쓸때는
// 최종 return 하기전 next를 해줘야 다음 middleware로 넘어갈수있기 때문이다.
https://inpa.tistory.com/entry/EXPRESS-%F0%9F%93%9A-%EB%AF%B8%EB%93%A4%EC%9B%A8%EC%96%B4-%F0%9F%92%AF-%EC%9D%B4%ED%95%B4-%EC%A0%95%EB%A6%AC
//ex 
// const server = http.createServer((req, res) => { // 이 함수는 그냥 처리결과를 하기위한 콜백함수});
1. pug
2. controller
3. router, server, db,, init

* resave : 모든 request마다 세션의 변경사항이 있든 없든 세션을 다시 저장한다.
- true:
+ 스토어에서 세션 만료일자를 업데이트 해주는 기능이 따로 없으면 true로 설정하여 매 request마다 세션을 업데이트 해주게 한다.
- false:
+ 변경사항이 없음에도 세션을 저장하면 비효율적이므로 동작 효율을 높이기 위해 사용한다.
+ 각각 다른 변경사항을 요구하는 두 가지 request를 동시에 처리할때 세션을 저장하는 과정에서 충돌이 발생할 수 있는데 이를 방지하기위해 사용한다.


* saveUninitialized : uninitialized 상태인 세션을 저장한다. 여기서 uninitialized 상태인 세션이란 request 때 생성된 이후로 아무런 작업이 가해지지않는 초기상태의 세션을 말한다.
- true:
+ 클라이언트들이 서버에 방문한 총 횟수를 알고자 할때 사용한다.
- false:
+ uninitialized 상태인 세션을 강제로 저장하면 내용도 없는 빈 세션이 스토리지에 계속 쌓일수 있다. 이를 방지, 저장공간을 아끼기 위해 사용한다.

env 파일은 package.json 옆에 둬야 함.

1. fetch('url')로 다른 서버를 통해 데이터를 가져올 수있다.
하지만, res.body 에 담겨있는 날것의 url로는 제대로 된 객체를 받아올 수 없다.

2.때문에 중간에 .json 함수가 response의 스트림을 가져와 끝까지 읽고, res.body의 텍스트를 promise의 형태로 반환한다.

3. 다른 서버에서 데이터를 object 형식으로 받아온다.

tip)파일이 열려있고 열어놓은파일의 함수를 작성하면 vsc가 자동으로 import 해준다

단축키 모음 :
ctrl + p = 퀵 오픈
ctrl + ` = 터미널 열기
home , end = 문장의 첫부분, 끝부분
ctrl + <- -> = 단어별 이동
ctrl + enter = 다음 줄로 이동 
ctrl + d = 멀티 단어 셀렉터
ctrl + u = 이전 커서로 이동
alt + shift + drag , shift + alt + i = 다중셀럭터

database에는 file을 저장시키는것이 아닌 folder를 만들어서 location만 저장해 보내준다.

npm run dev = launch backend
npm run assets = launch frontend

/* => 하위 파일 모두

partial 혹은 mixin file을 만들때 scss 파일도 같이 만들어 준다

sudo mongod --dbpath ~/data/db